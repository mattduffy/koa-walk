<div id="map">
  <div id="container">
    <div id="login" data-tab="login">
      <form id="loginId" name="login">
        <label for="emailId">Email: </label>
        <br>
        <input type="email" id="emailId" name="email" size="40" value="<%= sessionUser?.email?.primary %>" placeholder="user@example.com" required>
        <br>
        <label for="passwordId">Password: </label>
        <br>
        <input type="password" id="passwordId" name="password" size="40" value="" required>
        <br>
        <input type="hidden" id="csrfTokenId" name="csrfToken" value="<%= csrfToken %>" required>
        <input type="submit" id="submitId" name="submit" value="Login">
        <button id="cancelId" name="cancel">Cancel</button>
      </form>
      <div id="welcomeId">
        <h3>Hi, <span data-first=""><%= sessionUser?.firstName %></span></h3>
        <form id="preferencesId" name="preferences">
          <fieldset id="set1Id" name="set1" form="preferencesId" title="User Preferences" tabindex="0">
            <legend>Preferences</legend>
            Distance Units:
            <br>
            <label>Metric - meters &amp; kilometers<input id="metricId" name="units" type="radio" value="Metric" <%= (units === 'Metric') ? 'checked' : '' %> tabindex="0"></label>
            <br>
            <label>Imperial - feet &amp; miles<input id="imperialId" name="units" type="radio" value="Imperial" <%= (units === 'Imperial') ? 'checked' : '' %> tabindex="0"></label>
            <input type="hidden" id="csrfTokenId" name="csrfToken" value="<%= csrfToken %>" required>
          </fieldset>
        </form>
        <a id="logout" href="/logout">Log out</a>
      </div>
    </div>
    <div id="list" data-tab="list">
      <h3>Saved Walks</h3>
    </div>
    <div id="new" data-tab="new">
      <h3>Start A New Walk</h3>
      <form id="startWalkForm" action="<%= origin %>/walk/start" method="POST">
        <input type="hidden" id="csrf-token" value="<%= csrfToken %>">
        <label for="name">Give your walk a name</label>
        <input type="text" id="name" size=45 value="">
        <label for="location">Location</label>
        <input type="text" id="location" size=45 value="">
        <label for="lat">Starting Coordinates</label>
        <input type="text" id="coords" size=45 readonly value="">
      </form>
      <br>
      <h3 id="walkName"></h3>
      <button id="start">Start</button>
      <button id="stop" disabled>Stop</button><br>
      <div id="stats">
        Walk duration: <span id="duration">00:00:00</span><br>
        Waypoints recorded: <span id="numWaypoints">0</span><br>
        Distance walked: <span id="distance">0</span><br> 
      </div>
      <br>
      <button id="saveWalk">Save Walk</button>
      <button id="clearWalk">Clear Walk</button>
      <br>
    </div>
    <div id="maps" data-tab="maps">
      <h3>Show Maps</h3>

    </div>
    <div id="app" data-tab="app">
      <h3 id="h3"></h3>
      <p id="p1"></p>
      <p id="p2"></p>
      <p id="p3"></p>
      
    </div>
  </div>
</div>
<script nonce="<%= nonce %>"
  src="https://cdn.apple-mapkit.com/mk/5.x.x/mapkit.core.js"
  crossorigin async
  data-callback="initMapKit"
  data-libraries="services,full-map"
  data-initial-token="">
</script>
<script nonce="<%= nonce %>" type="module">
  import State from '/j/State.js'
  
  let DISPLAY_UNITS = <%- (units !== false) ? `\'${units}\'` : false %> || 'Metric'
  const identifier = 'my_walk'
  const origin = '<%= origin %>'
  const jwtAccess = '<%= searchJwtAccess %>'
  window.csrfToken = '<%= csrfToken %>'
  console.log('csrfToken on load: ', window.csrfToken)
  window.walking = window.walking ?? new State()
  window.walker = new Worker('<%= origin %>/j/worker.js', { name: 'walker', type: 'module' }) || null
  const dMap = document.querySelector('div#map')
  const dHeader = document.querySelector('header')
  const accuracy = 30 // meters
  const accuracyMargin = 5 // meters
  let lowAccuracy = false
  let map
  const app = document.querySelector('div#app')
  function fitMap(e = {}) {
    // console.log('fitMap(e)', e)
    let mapHeight = window.innerHeight - dHeader.clientHeight
    dMap.style.height = `${mapHeight}px`
    dMap.style.maxHeight = `${mapHeight}px`
  }
  window.addEventListener('resize', fitMap)
  fitMap()
  async function setupMapKitJs() {
    const tokenOpts = {
      method: 'GET',
      headers: {
        Accept: 'application/json',
        Authorization: `Bearer ${jwtAccess}`,
      },
    }
    const request = new Request(`${origin}/mapkit/getToken`, tokenOpts)
    const response = await fetch(request)
    let tokenID
    if (response.headers.get('content-type').includes("application/json")) {
      const x = await response.json()
      tokenID = x.tokenID
      window.csrfToken = x.newCsrfToken
    } else {
      console.info('failed to get mapkit token')
      console.log(await response.text())
    }
    if (!window.mapkit || window.mapkit.loadedLibraries.length === 0) {
      // mapkit.core.js of the libraries are not loaded yet.
      // Set up the callback and wait for it to be called.
      await new Promise(resolve => { window.initMapKit = resolve })
      // Clean up
      delete window.initMapKit
    }
    mapkit.init({
      authorizationCallback: function(done) {
        done(tokenID)
      },
    })
  }
  window.updatePreferences = async function(e) {
    console.log(e)
    e.preventDefault()
    e.stopPropagation()
    const credentials = {}
    credentials.url = `${origin}/user/preferences/update`
    credentials.csrfTokenHidden = window.csrfToken
    credentials.jwtAccess = jwtAccess
    credentials.TASK = 'SET_PREF'
    credentials.units = e.target.value
    console.log(credentials)
    function finish(e) {
      console.log(e)
      if (e.TASK === 'SET_PREF' && e.status === 'ok') {
        DISPLAY_UNITS = e.newUnits
        window._map.distances = mapkit.Map.Distances[DISPLAY_UNITS]
      }
      if (e?.newCsrfToken) {
        window.csrfToken = e.newCsrfToken
      }
    }
    updatePreferences.finish = finish
    window.walker.postMessage(credentials)
  }
  async function main() {
    await setupMapKitJs()
    let lat = 39.833333 
    let lon = -98.583333
    let position
    const mapOpts = {
      mapType: mapkit.Map.MapTypes.Standard,
      loadPriority: mapkit.Map.LoadPriorities.PointsOfInterest,
      selectableMapFeatures: [mapkit.MapFeatureType.PhysicalFeature, mapkit.MapFeatureType.PointOfInterest],
      visibleMapRect: new mapkit.MapRect(0, 0, 1, 1),
      isZoomEnabled: true,
      showsCompass: mapkit.FeatureVisibility.Visible,
      showsScale: mapkit.FeatureVisibility.Visible,
      showsZoomControl: true,
      cameraDistance: 100,
      showsPointsOfInterest: true,
      isRotationEnabled: true,
      isScrollEnabled: true,
      showsMapTypeControl: true,
      distances: mapkit.Map.Distances[DISPLAY_UNITS],
    }
    if ("geolocation" in navigator) {
      console.log('Can we get a location fix?') 
      const _opts = {
        enableHighAccuracy: true,
        timeout: 5000,
        maximumAge: 0,
      }
      async function geoSuccess(g) {
        console.log('geoSuccess')
        console.info(g)
        updatePosition(g)
        position = g
        try {
          await setPosition(position)
        } catch (e) {
          console.warn(e)
        }
      }
      function geoFail(g) {
        console.info('geoFail')
        console.info(g)
      }
      const geoOpts = {
        enableHighAccuracy: true,
        maximumAge: 1000 * 3,
      }
      console.log('geo options: ', geoOpts)
      await myGetCurrentPosition(geoOpts)
    } else {
      console.log('geolocation not available, no way of knowing.')
      console.log(`using ${lat} ${lon} instead`)
      console.log('geo error: ', position)
      await noPositionCantWalk(mapOpts, { coords: { latitude: lat, longitude: lon, accuracy: 0 } })
    }
    function updatePosition(g) {
      console.log('updatePosition()', g)
      lat = g?.coords?.latitude ?? g.latitude
      lon = g?.coords?.longitude ?? g.longitude
      const _acc = g?.coords?.accuracy ?? g.accuracy
      if (_acc > accuracy) {
        console.info(`position.accuracy (${_acc}) is greater than ${accuracy}m`)
        lowAccuracy = true
      }
      const coords = { latitude: lat, longitude: lon, accuracy: _acc}
      populateApp(null, coords)
      if (window.walking) {
        window.walking.currentPosition = coords
      }
    }
    async function setPosition(position) {
      console.log('setPosition()', position)
      if (window.walking) {
        window.walking.currentPosition = position
      }
      if (position && !lowAccuracy) {
        await goodAccuracyCanWalk(mapOpts, position)
      } else if (position?.coords?.accuracy > accuracy && position?.coords?.accuracy <= accuracy + accuracyMargin) {
        console.info(`low geoLocation accuracy: ${position.coords.accuracy}`)
        console.info('can\'t track movement very accurately.')
        await lowAccuracyPositionCantWalk(mapOpts, position)
      } else if (lowAccuracy && position) {
        console.info(`really low geoLocation accuracy: ${position.coords.accuracy}`)
        console.info('can\'t track movement accurately.')
        await lowAccuracyPositionCantWalk(mapOpts, position)
      } else {
        console.log('no geo position available')
        console.log('using lat: ', lat, ' lon: ', lon)
        await noPositionCantWalk(mapOpts, { coords: { latitude: lat, longitude: lon, accuracy: 1000 } })
        lowAccuracy = true
      }
    }
    async function myGetCurrentPosition(geoOpts) {
      let position
      try {
        position = await new Promise((resolve, reject) => {
          navigator.geolocation.getCurrentPosition(
            (geo) => {
              if (geo.coords.accuracy > accuracy) {
                console.info(`current position accuracy (${geo.coords.accuracy}) is greater than ${accuracy}m`)
                lowAccuracy = true
              }
              lat = geo.coords.latitude
              lon = geo.coords.longitude
              resolve(geo)
            },
            (err) => {
              console.log(err)
              console.info(`code: ${err.code}, msg: ${err.message}`)
              reject(err)
            },
            geoOpts
          )
        })
        console.log('myGetCurrentPosition() ', position)
        await setPosition(position)
        updatePosition(position)
      } catch (e) {
        console.warn('failed to acquire geoLocation for some reason.')
        console.warn(e)
        console.log(`Failing back to generic position: lat ${lat}, lon ${lon} to initialize the map.`)
        position = { latitude: lat, longitude: lon, accuracy: 1000, timestamp: Date.now() }
        lowAccuracy = null
        console.log('failback position: ', position)
        await setPosition(position)
      }
      return position
    }
    window.myGetCurrentPosition = myGetCurrentPosition
    window._map.addEventListener('single-tap', mapSingleTap)
    async function mapSingleTap(e) {
      console.log(e)
    }
    window._map.addEventListener('user-location-change', userLocationChange)
    async function userLocationChange(e) {
      console.log('user-location-change event: ', e)
      const evtCoords = e.coordinate
      const coords = {
        latitude: evtCoords.latitude,
        longitude: evtCoords.longitude,
        accuracy: window.walking.state.currentPosition.accuracy,
        timestamp: e.timestamp.valueOf()
      }
      updatePosition(coords)
      const mapkitCoordinate = new mapkit.Coordinate(evtCoords.latitude, evtCoords.longitude)
      if (!window.walking.active) {
        window._map.setCenterAnimated(mapkitCoordinate, true)
        window.dispatchEvent(
          new CustomEvent('locality-changed', {
            bubbles: false,
            cancelable: true,
            detail: { coords },
          })
        )
      } else {
        await recordWalk(coords, mapkitCoordinate)
        // markWalkPointOnMap()
        window._map.setCenterAnimated(mapkitCoordinate, false)
      }
    }
    window.addEventListener('locality-changed', localityChanged)
    function localityChanged(e) {
      console.log('localityChanged(e)', e)
      e.preventDefault()
      e.stopPropagation()
      const evtCoords = e.detail.coords
      const a = window.app || document.querySelector('div#app')
      let ul = a.querySelector('ol#change')
      if (!ul) {
        ul = document.createElement('ol')
        ul.id = 'change'
        a.appendChild(ul)
      }
      if (e.detail.coords) {
        let li = document.createElement('li')
        li.textContent = `lat/lon: (${evtCoords.latitude.toFixed(4)}, `
          + `${evtCoords.longitude.toFixed(4)}), `
          + `acc: ${displayUnits(evtCoords.accuracy, DISPLAY_UNITS , 1)}`
        ul.appendChild(li)
      }
    }
    document.querySelector('button[name="showStartNew"]').addEventListener('click', clickStartNew)
    function clickStartNew(e) {
      console.log(e)
      e.preventDefault()
      e.stopPropagation()
      document.querySelector('span[data-action="showNew"]').click()
    }
    document.querySelector('button#start').addEventListener('click', startWalk)
    async function startWalk(e) {
      e.preventDefault()
      e.stopPropagation()
      if (!window.Worker) {
        console.warn('No web worker, can\'t save walk.')
        return false
      }
      if (!"geolocation" in navigator) {
        console.warn('You don\'t have a location, can\'t start walk.')
        return false
      }
      const startButton = document.querySelector('button#start')
      startButton.disabled = true
      const stopButton = document.querySelector('button#stop')
      stopButton.disabled = false
      const startWalkForm = document.forms.namedItem('startWalkForm')
      startWalkForm.style.display = 'none'
      const name = startWalkForm.children.namedItem('name').value
      const h3 = document.querySelector('h3#walkName')
      h3.textContent = name
      h3.style.display = 'block'
      function go(e) {
        console.log('startWalk.go(): ', e)
      }
      startWalk.go = go
      const _d = Date.now()
      window.walking.active = true
      window.walking.startPosition = window.walking.currentPosition
      window.walking.startTime = _d
      window.walking.name = name
      window.walking.date = _d
      const c = new mapkit.Coordinate(window.walking.currentPosition.latitude, window.walking.currentPosition.longitude)
      const w = {
        TASK: 'START_WALK',
        date: _d,
        name: name,
        startPosition: window.walking.currentPosition,
        startTime: _d,
        c, 
      }
      window.walking.addPoint({ ...window.walking.startPosition, timestamp: _d })
      window.walking.c = c
      window.walker.postMessage(w)
      markWalkPointOnMap()
      window.walking.state.intervalId = setInterval(() => {
        const _p = document.querySelector('span#numWaypoints')
        _p.textContent = window.walking.points.length
        const _dur = document.querySelector('span#duration')
        const _n = Date.now() - window.walking.startTime
        _dur.textContent = new Date((_n)).toISOString().slice(11, 19)
        const _dis = document.querySelector('span#distance')
        const reducedDistance = window.walking.totalDistance
        console.log('reducing distances: ', reducedDistance)
        console.log('display formated redcuced: ', displayUnits(reducedDistance, DISPLAY_UNITS, 1))
        _dis.textContent = `${displayUnits(reducedDistance, DISPLAY_UNITS, 1)}`
      }, 1000)
    }
    document.querySelector('button#stop').addEventListener('click', stopWalk)
    async function stopWalk(e) {
      e.preventDefault()
      e.stopPropagation()
      const start = document.querySelector('button#start')
      const stop = document.querySelector('button#stop')
      start.disabled = false
      stop.disabled = true
      const startWalkForm = document.forms.namedItem('startWalkForm')
      startWalkForm.style.display = 'block'
      const coords = {
        latitude: window.walking.currentPosition.latitude,
        longitude: window.walking.currentPosition.longitude,
        accuracy: window.walking.currentPosition.accuracy,
        timestamp: Date.now()
      }
      await endWalk(coords)
      clearInterval(window.walking.state.intervalId)
    }
    async function recordWalk(wp, c) {
      const step = { TASK: 'SET_WAYPOINT', wp, c, u: DISPLAY_UNITS }
      window.walking.c = c
      window.walking.addPoint(wp)
      window.walker.postMessage(step)
      markWalkPointOnMap()
    }
    async function endWalk(end) {
      window.walking.state.active = false
      window.walking.endPosition = end
      window.walking.endTime = end.timestamp
      const c = new mapkit.Coordinate(end.latitude, end.longitude)
      const finalStep = { TASK: 'STOP_WALK', end, c }
      window.walking.addPoint(end)
      window.walking.c = c
      window.walker.postMessage(end)
    }
    window.saveWalk = async function(e) {
      e.preventDefault()
      e.stopPropagation()
      if (window.walking.c.length === 0) {
        // No telemetry data, nothing to save.
        // Show some kind of message.
        console.log('nothing to save')
        return false
      }
      if (window.walking.active) {
        document.querySelector('button#stop').click()
      }
      const credentials = {
        TASK: 'SAVE_WALK',
        url: `${origin}/save`,
        csrfTokenHidden: csrfToken,
        jwtAccess: jwtAccess,
      }
      window.walker.postMessage(credentials)
      function finish(e) {
        console.log('finish saving walk: ', e)
      }
      saveWalk.finish = finish
    }
    document.querySelector('button#saveWalk').addEventListener('click', saveWalk)
    function clearWalk(e) {
      e.preventDefault()
      e.stopPropagation()
      document.querySelector('span#numWaypoints').textContent = '0'
      document.querySelector('span#duration').textContent = '00:00:00'
      document.querySelector('span#distance').textContent = '0'
      window.walking.clear()
      window.walker.postMessage({ TASK: 'CLEAR_WALK' })
      window._map.removeOverlay(window._map.overlays.find((o) => o.data.name === identifier))
    }
    document.querySelector('button#clearWalk').addEventListener('click', clearWalk)
    function markWalkPointOnMap() {
      console.log('Mark point on map: ')
      const style = new mapkit.Style({
        lineWidth: 10,
        lineJoin: "round",
        lineDash: [],
        strokeColor: "royalblue"
      })
      const points = window.walking.points.map((p) => {
        return new mapkit.Coordinate(p.latitude, p.longitude)
      })
      let polyline
      if (window._map.overlays.length > 0) {
        console.log(`${window._map.overlays.length} overlays present in map`)
        polyline = window._map.overlays.find(o => o.data.name === identifier)
        console.log('found previously created polyline: ', polyline)
        window._map.removeOverlay(polyline)
      }
      console.log(`no previous polyline overlay with data.name: ${identifier} found`)
      polyline = new mapkit.PolylineOverlay( points, { style: style })
      polyline.data = { name: identifier }
      console.log('creating new polyline overlay: ', polyline)
      window._map.addOverlay(polyline)
      window._map.showItems(polyline)
    }
    if (window.Worker) {
      console.log('Worker <=> Walker')
      const logged = <%= isAuthenticated %>
      const loginForm = document.forms['login']
      const login = loginForm.elements.submit
      login.addEventListener('click', (e) => {
        e.preventDefault()
        e.stopPropagation()
        doLogin(document.forms['login'])
      })
      const welcomeDiv = document.querySelector('div#welcomeId')
      console.log(`logged = ${logged}`)
      if (logged) {
        welcomeDiv.style.display = 'block'
        loginForm.style.display = 'none'
        document.forms['preferences'].elements['units'].forEach((r) => {
          r.addEventListener('change', updatePreferences)
        })
      }
      const logout = document.querySelector('a#logout')
      logout.addEventListener('click', (e) => {
        e.preventDefault()
        e.stopPropagation()
        doLogout()
      })
      window.walker.onmessage = function(e) {
        console.log('walker.onmessage: ', e.data)
        switch (e.data.TASK) {
          case 'SETUP':
            console.log('csrfToken before SETUP: ', window.csrfToken)
            console.log(e.data)
            if (e.data?.newCsrfToken) {
              window.csrfToken = e.data.newCsrfToken
            }
            console.log('csrfToken after SETUP: ', window.csrfToken)
            break
          case 'LOGIN':
            console.log('csrfToken before LOGIN: ', window.csrfToken)
            if (/failed/i.test(e.data.user.status)) {
              doLogin.failed(e.data.user)
            } else {
              doLogin.success(e.data.user)
            }
            console.log('csrfToken after LOGIN: ', window.csrfToken)
            break
          case 'LOGOUT':
            console.log('csrfToken before LOGOUT: ', window.csrfToken)
            doLogout.finish(e.data)
            console.log('csrfToken after LOGOUT: ', window.csrfToken)
            break
          case 'GET_LIST':
            console.log('csrfToken before GET_LIST: ', window.csrfToken)
            window.getList.finish(e.data)
            console.log('csrfToken after GET_LIST: ', window.csrfToken)
            break
          case 'SET_PREF':
            console.log('csrfToken before SET_PREF: ', window.csrfToken)
            window.updatePreferences.finish(e.data)
            console.log('csrfToken after SET_PREF: ', window.csrfToken)
            break
          case 'START':
            console.log('csrfToken before START_WALK: ', window.csrfToken)
            startWalk.go(e.data)
            console.log('csrfToken after START_WALK: ', window.csrfToken)
            break
          case 'SAVE':
            console.log('csrfToken before SAVE: ', window.csrfToken)
            window.saveWalk.finish(e.data)
            console.log('csrfToken after SAVE: ', window.csrfToken)
            break
          default:
            console.log(e.data)
        }
      }
      window.walker.onerror = function(e) {
        e.preventDefault()
        console.warn('err msg: ', e.message)
        console.warn('in: ', e.filename)
        console.warn('at: ', e.lineno)
      }
      console.log('DOMContentLoaded: checking if refresh is necessary...')
      window.isAuthenticated = <%= (isAuthenticated) ? true : false %>
      console.log('isAuthenticated? ', isAuthenticated)
      console.log('window.walker: ', window.walker)
      if (window.isAuthenticated && window.walker) {
        console.log('refreshing user...')
        window.walker.postMessage({ TASK: 'SETUP', isAuth: true, url: `${origin}/refresh`, jwtAccess: '<%= searchJwtAccess %>', csrfTokenHidden: window.csrfToken })
      }
    } else {
      console.log('Not compatible with walking.')
    }   
  }
  function doLogin(form) {
    const credentials = {}
    credentials.url = `${origin}/login`
    const csrfTokenHidden = form.elements['csrfToken']
    if (csrfTokenHidden.value === '' || csrfTokenHidden.value === undefined) {
      return isRequired(csrfTokenHidden)
    }
    credentials.csrfTokenHidden = csrfTokenHidden.value
    const email = form.elements['email']
    console.log(email)
    if (email.value === '' || email.value === undefined) {
      console.log(email)
      return isRequired(email)
    }
    credentials.email = email.value
    const password = form.elements['password']
    if (password.value === '' || password.value === undefined) {
      return isRequired(password)
    }
    credentials.password = password.value
    credentials.jwtAccess = jwtAccess
    credentials.TASK = 'LOGIN'
    console.log('1', credentials)
    function isRequired(el) {
      console.log(el) 
      el.style.border = '1px solid red'
      el.addEventListener('change', (e) => {
        e.target.style.border = ''
        removeEventListener('change', e.target)
      })
      return false
    }
    function success(e) {
      console.log('login success')
      console.log(e)
      const spans = document.querySelectorAll('span[data-first]')
      spans.forEach((span) => {
        console.log(span)
        span.dataset.first = e.user.first
        span.innerText = e.user.first
      })
      toggleTab('login')
      form.style.display = 'none'
      const welcome = document.querySelector('div#welcomeId')
      welcome.style.display = 'block'
      toggleButtons('showLogin')
      window.csrfToken = e.user.newCsrfToken  
    }
    doLogin.success = success
    function failed(e) {
      if (e?.error?.match(/wrong password/i)) {
        form.elements.password.style.border = '1px solid red'
      }
      if (e?.info?.match(/no user found with email/i)) {
        form.elements.email.style.border = '1px solid red'
      }
      console.log('login failed')
      console.log(e)
      window.csrfToken = e.user.newCsrfToken  
    }
    doLogin.failed = failed
    window.walker.postMessage(credentials)
  }
  function doLogout() {
    const form = document.forms['login']
    form.elements.password.value = ''
    form.elements.email.value = ''
    window.walker.postMessage({ TASK: 'LOGOUT', url: `${origin}/logout`, jwtAccess })
    function finish(res) {
      console.log('logout response: ', res)
      window.csrfToken = res.response.user.newCsrfToken
      const spans = document.querySelectorAll('span[data-first]')
      spans.forEach((span) => {
        console.log(span)
        span.dataset.first = ''
        span.innerText = ''
      })
      toggleTab('login')
      toggleButtons('showLogin')
      form.style.display = 'block'
      const welcome = document.querySelector('div#welcomeId')
      welcome.style.display = 'none'
      form.elements.csrfToken.value = res.response.user.csrfToken
    }
    doLogout.finish = finish
  }
  window.getList = async function() {
    const credentials = {}
    credentials.url = `${origin}/getList`
    credentials.csrfTokenHidden = window.csrfToken
    credentials.jwtAccess = jwtAccess
    credentials.TASK = 'GET_LIST'
    console.log(credentials)
    const div = document.querySelector('div#list')
    function finish(e) {
      console.log('getList.finish', e)
      window.csrfToken = e.newCsrfToken
      const noAuth = div.children.namedItem('noAuth') ?? null
      if (e.auth === 'no' && !noAuth) { 
        console.log(`e.auth: ${e.auth}`)
        console.log(`noAuth: ${noAuth}`)
        const noAuthP = document.createElement('p')
        noAuthP.id = 'noAuth'
        noAuthP.textContent = 'Login to see saved walks.'
        div.appendChild(noAuthP)
      } else if (div.children.namedItem('noAuth')) {
        console.log('show noAuth')
        noAuth.style.display = 'block' 
      } else if (e.list.length === 0) {
        console.log(`e.list.length = ${e.list.length}`)
        if (noAuth) {
          noAuth.style.display = 'none'
        }
        if (div.children.namedItem('noWalks')) {
          console.log('already displayed no walks')
        } else {
          const noWalks = document.createElement('p')
          noWalks.textContent = 'No saved walks.'
          noWalks.id = 'noWalks'
          div.appendChild(noWalks)
        }
      } else {
        console.log(`e.auth = ${e.auth} && e.list.length = ${e.list.length}`)
        const walks = div.children.namedItem('walks')
        if (!walks) {
          const ul = document.createElement('ul')
          ul.id = 'walks'
          e.list.forEach((w) => {
            const li = document.createElement('li')
            li.innerHTML = `${w}`
            ul.appendChild(li)
          })
          div.appendChild(ul)
        } else {
          console.log(`e.auth = ${e.auth}`)
          e.list.forEach((w) => {
            const li = document.createElement('li')
            li.textContent = `${w}`
            ul.appendChild(li)
          })
        }
      }
    }
    getList.finish = finish
    window.walker.postMessage(credentials)
  }
  async function noPositionCantWalk(o, g) {
    console.log(`no position available: ${g}`)
    window.me = new mapkit.Coordinate(g.coords.latitude, g.coords.longitude)
    window.here = new mapkit.CoordinateRegion(
      me,
      new mapkit.CoordinateSpan(0.05, 0.05)
    )
    if (!window._map) {
      window._map = new mapkit.Map('map', o)
    }
    window._map.region = here
    window._map.cameraDistance = 250000
    console.log(`map.showsUserLocation: ${window._map.showsUserLocation}`) 
    window._map.showsUserLocation = true 
    window._map.setCenterAnimated(me, true)
    const strings = {
      h3: 'You have no location.',
      p1: 'Your walk can not be recorded.',
      p2: '',
      p3: '',
    }
    populateApp(strings)
    app.style.display = 'block'
  }  
  async function lowAccuracyPositionCantWalk(o, g) {
    console.log(`low accuracy: ${g.coords.accuracy}`)
    o.showsUserLocationControl = true
    o.tracksUserLocation = true
    window.me = new mapkit.Coordinate(g.coords.latitude, g.coords.longitude)
    window.here = new mapkit.CoordinateRegion(
      me,
      new mapkit.CoordinateSpan(0.05, 0.05)
    )
    if (!window._map) {
      window._map = new mapkit.Map('map', o)
    }
    window._map.region = here
    if (Math.trunc(g.coords.accuracy) > 10 * (accuracy + accuracyMargin)) {
      console.log('really low accuracy')
      window._map.cameraDistance = Math.trunc(g.coords.accuracy)
    } else {
      window._map.cameraDistance = 100
    }
    window._map.showsUserLocation = true 
    console.log(`map.showsUserLocation: ${window._map.showsUserLocation}`) 
    window._map.setCenterAnimated(me, true)
    myGeocoder(me)
    const strings = {
      h3: `Can't get a very accurate GPS position.`,
      p1: `Your position is <span id="lat" class="coords">${g.coords.latitude.toFixed(4)}</span> lat, <span id="lon" class="coords">${g.coords.longitude.toFixed(4)}</span> lon.<br>`,
      p2: ``,
      p3: `GPS accuracy is low, <span id="acc" class="coords">${displayUnits(g.coords.accuracy, DISPLAY_UNITS, 1)}</span>.<br>`
        + `  Your walk may not be recorded very accurately.`,
      b1: '<button name="showStartNew">Start a walk!</button>',
    }
    populateApp(strings)
    app.style.display = 'block'
  }
  async function goodAccuracyCanWalk(o, g) {
    console.log(`good accuracy: ${g.coords.accuracy}`)
    o.showsUserLocation = true
    o.tracksUserLocation = true
    o.showsUserLocationControl = true
    window.me = new mapkit.Coordinate(g.coords.latitude, g.coords.longitude)
    window.here = new mapkit.CoordinateRegion(
      me,
      new mapkit.CoordinateSpan(0.05, 0.05)
    )
    if (!window._map) {
      window._map = new mapkit.Map('map', o)
    }
    window._map.region = here
    window._map.cameraDistance = 100
    window._map.showsUserLocation = true 
    window._map.setCenterAnimated(me, true)
    myGeocoder(me) 
    const strings = {
      h3: 'Your starting position looks good.',
      p1: `Your position is <span id="lat" class="coords">${g.coords.latitude.toFixed(4)}</span> lat, <span id="lon" class="coords">${g.coords.longitude.toFixed(4)}</span> lon.<br>`,
      p2: '',
      p3: `GPS accuracy is good, <span id="acc" class="coords">${displayUnits(g.coords.accuracy, DISPLAY_UNITS, 1)}</span>.<br>`
        + '  Tap the start button when you are ready.',
      b1: '<button name="showStartNew">Start a walk!</button>',
    }
    populateApp(strings)
    app.style.display = 'block'
  }
  // Geocoder
  function myGeocoder(coords) {
    console.log('geocoder with: ', coords)
    const opts = {
      getsUserLocation: true,
      language: 'en-US'
    }
    const geocoder = new mapkit.Geocoder(opts)
    console.log(geocoder)
    const reverseLookup = geocoder.reverseLookup(coords, function(error, data) {
      console.log('reverseLookup callbback')
      if (error) {
        console.info(error)
      }
      if (data && data.results.length > 0) {
        console.log(data.results[0])
        populateApp(null, null, data.results[0])
      }
    })
  }
  function displayUnits(x, u = 'm', n = 1) {
    const _u = u.toLowerCase()
    console.log('displayUnits(): ', x, _u, n)
    if (x === null || x === undefined) {
      console.log('displayUnits() missing x: ', x)
      return 0 
    }
    if (/(metric)|(km)|(m$)/i.test(_u)) {
      if (x < 750) {
        return `${x.toFixed(n)} m`
      } else {
        return `${( parseFloat(x) / 1000 ).toFixed(n)} km`
      }
    } else if (/(imperial)|(mile)|(mi)|(feet)|(ft)|(f)/i.test(_u)) {
      let _x = parseFloat(x) * 3.3
      if (_x < (5280 / 2)) {
        return `${_x.toFixed(n)} ft`
      } else {
        return `${( _x / 5280 ).toFixed(n)} mi`
      }
    }
  }
  function populateApp(strings, coords = null, locality = null) {
    const a = window.app ?? document.querySelector('div#app')    
    // console.log(a)
    if (strings) {
      a.children.namedItem('h3').innerHTML = strings.h3
      a.children.namedItem('p1').innerHTML = strings.p1
      a.children.namedItem('p2').innerHTML = strings.p2
      a.children.namedItem('p3').innerHTML = strings.p3
      if (strings?.b1) {
        const b1div = document.createElement('div')
        b1div.innerHTML = strings.b1
        a.appendChild(b1div)
      }
    }
    if (locality) {
      const {
        subLocality,
        name,
        administrativeArea,
        administrativeAreaCode,
      } = locality ?? null
      // const name = locality.name ?? null
      // const adminAreacode = locality.administrativeAreaCode ?? null
      console.log(`updating new locality: ${(subLocality) ? subLocality + ',' : ''} ${name}`)
      const l = `${(subLocality) ? '<span id="subLocality">' + subLocality + '</span><br>' : ''}`
        + `${(name) ? '<span id="name">' + name + '</span><br>' : ''}` 
        + `${(administrativeArea) ? '<span id="administrativeArea">' + administrativeArea + '</span>, ' : ''}`
        + `${(administrativeAreaCode) ? '<span id="administrativeAC">' + administrativeAreaCode + '</span>' : ''}`
        + '<br>'
        a.children.namedItem('p2').innerHTML += l
      // new walk div content
      if (!window.walking.active) {
        document.querySelector('input[id="name"]').value = (subLocality) ? subLocality : name
        document.querySelector('input[id="location"]').value = `${(name) ? name : ''}`
          + `${(administrativeArea) ? ', ' + administrativeArea : ''}`
          + `${(administrativeAreaCode) ? ', ' + administrativeAreaCode : ''}`
      }
    }
    if (coords) {
      console.log('populateApp coords: ', coords)
      console.log(`updating user's coordinates: (${coords.latitude.toFixed(4)}, ${coords.longitude.toFixed(4)})`)
      const _lat = a.querySelector('p > span#lat')
      if (coords.latitude && _lat) {
        a.querySelector('p > span#lat').innerHTML = coords.latitude.toFixed(4)
      }
      const _lon = a.querySelector('p > span#lon')
      if (coords.longitude && _lon) {
        a.querySelector('p > span#lon').innerHTML = coords.longitude.toFixed(4)
      }
      const _acc = a.querySelector('p > span#acc')
      if (coords.accuracy && _acc) {
        a.querySelector('p > span#acc').innerHTML = displayUnits(coords.accuracy, DISPLAY_UNITS, 1)
      }
      // new walk div content
      if (!window.walking.active) {
        document.querySelector('input[id="coords"]').value = `${coords.latitude}, `
          + `${coords.longitude}`
      }
    }
  }
  await main()
</script>
