<div id="map">
  <div id="container">
    <div id="login">
      <form id="loginId" name="login">
        <label for="emailId">Email: </label>
        <br>
        <input type="email" id="emailId" name="email" size="40" value="<%= sessionUser?.email %>" placeholder="user@example.com">
        <br>
        <label for="passwordId">Password: </label>
        <br>
        <input type="password" id="passwordId" name="password" size="40" value="">
        <br>
        <input type="hidden" id="csrfTokenId" name="csrfToken" value="<%= csrfToken %>">
        <input type="submit" id="submitId" name="submit" value="Login">
        <button id="cancelId" name="cancel">Cancel</button>
      </form>
    </div>
    <div id="app">
      <h3></h3>
      <p></p>
    </div>
  </div>
  <script nonce=<%= nonce %>
    src="https://cdn.apple-mapkit.com/mk/5.x.x/mapkit.core.js"
    crossorigin async
    data-callback="initMapKit"
    data-libraries="full-map"
    data-initial-token=""
  ></script>
  <script nonce="<%= nonce %>" type="module">
    const accuracy = 30 // meters
    const accuracyMargin = 5 // meters
    let lowAccuracy = false
    const origin = '<%= origin %>'
    const jwtAccess = '<%= searchJwtAccess %>'
    let map
    const app = document.querySelector('div#app')
    async function setupMapKitJs() {
      const tokenOpts = {
        method: 'GET',
        headers: {
          Accept: 'application/json',
          Authorization: `Bearer ${jwtAccess}`,
        },
      }
      const request = new Request(`${origin}/mapkit/getToken`, tokenOpts)
      const response = await fetch(request)
      let tokenID
      if (response.headers.get('content-type').includes("application/json")) {
        const x = await response.json()
        tokenID = x.tokenID
        console.log(`mapkit token: ${tokenID}`)
      } else {
        console.info('failed to get mapkit token')
        console.log(await response.text())
      }
      if (!window.mapkit || window.mapkit.loadedLibraries.length === 0) {
        // mapkit.core.js of the libraries are not loaded yet.
        // Set up the callback and wait for it to be called.
        await new Promise(resolve => { window.initMapKit = resolve })
        // Clean up
        delete window.initMapKit
      }
      mapkit.init({
        authorizationCallback: function(done) {
          done(tokenID)
        },
      })
    }
    async function main() {
      await setupMapKitJs()
      let lat = 39.833333 
      let lon = -98.583333
      let position
      const opts = {
        mapType: mapkit.Map.MapTypes.Hybrid,
        loadPriority: mapkit.Map.LoadPriorities.PointsOfInterest,
        visibleMapRect: new mapkit.MapRect(0, 0, 1, 1),
        isZoomEnabled: true,
        showsCompass: mapkit.FeatureVisibility.Visible,
        showsScale: mapkit.FeatureVisibility.Visible,
        showsZoomControl: true,
        cameraDistance: 100,
        showsPointsOfInterest: true,
        isRotationEnabled: true,
        isScrollEnabled: true,
        showsMapTypeControl: false,
      }
      if ("geolocation" in navigator) {
        console.log('Can we get a location fix?') 
        const geoOpts = {
          enableHighAccuracy: true,
          maximumAge: 1000 * 10 * 3,
        }
        console.log('geo options: ', geoOpts)
        try {
          position = await new Promise((resolve, reject) => {
            navigator.geolocation.getCurrentPosition((geo) => {
                if (geo.coords.accuracy > accuracy) {
                  console.info(`position.coords.accuracy (${geo.coords.accuracy}) is greater than ${accuracy}m`)
                  lowAccuracy = true
                }
                lat = geo.coords.latitude
                lon = geo.coords.longitude
                resolve(geo)
              },
              (err) => {
                console.log(err)
                console.info(`code: ${err.code}, msg: ${err.message}`)
                reject(err)
              }
              ,geoOpts
            )
          })
          window.p = position
        } catch (e) {
          console.warn('failed to get geoLocation for some reason')
          console.warn(e)
          console.log('no geo position available')
          console.log('using generic lat: ', lat, ' lon: ', lon, ' to initialize the map.')
          await noPositionCantWalk(opts, { coords: { latitude: lat, longitude: lon, accuracy: 0 } })
          lowAccuracy = true
        }
      } else {
        console.log('geolocation not available, no way of knowing.')
        console.log(`using ${lat} ${lon} instead`)
        console.log('geo error: ', position)
        await noPositionCantWalk({ lat, lon })
      }
      console.log('geolocation: ', position)
      console.log(`Low accuracy ceiling: ${accuracy} + ${accuracyMargin} = ${accuracy + accuracyMargin} (actual accuracy: ${Math.trunc(position.coords.accuracy)})`)
      if (position && !lowAccuracy) {
        console.log('show user location')
        console.log(`position accuracy: ${position.coords.accuracy}`)
        await goodAccuracyCanWalk(opts, position)
      } else if (position.coords.accuracy > accuracy && position.coords.accuracy <= accuracy + accuracyMargin) {
        console.info(`low geoLocation accuracy: ${position.coords.accuracy}`)
        console.info('can\'t track movement accurately.')
        console.info(opts)
        await lowAccuracyPositionCantWalk(opts, position)
      } else if (lowAccuracy && position) {
        console.info(`really low geoLocation accuracy: ${position.coords.accuracy}`)
        console.info('can\'t track movement accurately.')
        console.log(opts)
        await lowAccuracyPositionCantWalk(opts, position)
      } else {
        console.log('no geo position available')
        console.log('using lat: ', lat, ' lon: ', lon)
        await noPositionCantWalk(opts, { coords: { latitude: lat, longitude: lon, accuracy: 0 } })
        lowAccuracy = true
      }
      async function goodAccuracyCanWalk(o, g) {
        console.log(`good accuracy: ${g.coords.accuracy}`)
        o.showsUserLocation = true
        o.tracksUserLocation = true
        o.showsUserLocationControl = true
        window.me = new mapkit.Coordinate(g.coords.latitude, g.coords.longitude)
        window.here = new mapkit.CoordinateRegion(
          me,
          new mapkit.CoordinateSpan(0.05, 0.05)
        )
        window.map = new mapkit.Map('map', o)
        window.map.region = here
        window.map.cameraDistance = 10
        console.log(`map.showsUserLocation: ${window.map.showsUserLocation}`) 
        window.map.showsUserLocation = true 
        window.map.setCenterAnimated(me, true)
        app.style.display = 'block'
        app.querySelector('h3').textContent = 'Your starting position looks good.'
        app.querySelector('p').textContent = 'Tap the start button when you are ready.'

      }
      async function lowAccuracyPositionCantWalk(o, g) {
        console.log(`low accuracy: ${g.coords.accuracy}`)
        window.me = new mapkit.Coordinate(g.coords.latitude, g.coords.longitude)
        window.here = new mapkit.CoordinateRegion(
          me,
          new mapkit.CoordinateSpan(0.05, 0.05)
        )
        window.map = new mapkit.Map('map', o)
        window.map.region = here
        if (Math.trunc(g.coords.accuracy) > 10 * (accuracy + accuracyMargin)) {
          console.log('really low accuracy')
          window.map.cameraDistance = Math.trunc(g.coords.accuracy)
        } else {
          window.map.cameraDistance = 10 
        }
        window.map.showsUserLocation = true 
        console.log(`map.showsUserLocation: ${window.map.showsUserLocation}`) 
        window.map.setCenterAnimated(me, true)
        app.style.display = 'block'
        app.querySelector('h3').textContent = 'Can\'t get a very accurate GPS position.'
        app.querySelector('p').textContent = 'Your walk may not be recorded very accurately.'
      }
      async function noPositionCantWalk(o, g) {
        console.log(`no position available: ${g.code}`)
        window.me = new mapkit.Coordinate(g.coords.latitude, g.coords.longitude)
        window.here = new mapkit.CoordinateRegion(
          me,
          new mapkit.CoordinateSpan(0.05, 0.05)
        )
        window.map = new mapkit.Map('map', o)
        window.map.region = here
        window.map.cameraDistance = 2300000
        console.log(`map.showsUserLocation: ${window.map.showsUserLocation}`) 
        window.map.showsUserLocation = true 
        window.map.setCenterAnimated(me, true)
        app.style.display = 'block'
        app.querySelector('h3').textContent = 'You have no location.'
        app.querySelector('p').textContent = 'Your walk will not be recorded.'
      }

      if (window.Worker) {
        console.log('Worker <=> Walker')
        const walker = new Worker('<%= origin %>/j/worker.js', { name: 'walking_app' })
        walker.onmessage = function(e) {
          switch (e.data.TASK) {
            case 'LOGIN':
              console.log(e.data.user) 
              break
            default:
              console.log(`${e.data}`)
          }
        }
        walker.onerror = function(e) {
          e.preventDefault()
          console.warn('err msg: ', e.message)
          console.warn('in: ', e.filename)
          console.warn('at: ', e.lineno)
        }
        const auth = walker.postMessage({TASK: 'LOGIN', username: 'matt', password: '9@zzw0rd'})
        console.log(auth.data.first)

        walker.postMessage('What should I do?')
        const tasks = [
          {TASK: 'START_WALK', msg: 'I am starting a walk'},
          {TASK: 'STOP_WALK', msg: 'I am done with my walk'},
          {TASK: 'SET_WAYPOINT', msg: `I am at position (${lat} lat, ${lon} lon).`},
          {TASK: 'SAVE_WALK', msg: 'Save this walk.'},
          {TASK: 'GET_WALK', msg: 'Get that previous walk.'},
          {TASK: 'GET_A_LIFE', msg: 'you heard me'}
        ]
        try {
          tasks.forEach(async (walk) => {
            // walker.postMessage(walk)
          })
        } catch (e) {
          console.warn(e)
        }
      } else {
        console.log('Not compatible with walking.')
      }   
    }
    await main()
    
  </script>
</div>
