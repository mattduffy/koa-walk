<div id="map">
  <script nonce=<%= nonce %>
    src="https://cdn.apple-mapkit.com/mk/5.x.x/mapkit.core.js"
    crossorigin async
    data-callback="initMapKit"
    data-libraries="full-map"
    data-initial-token=""
  ></script>
  <script nonce="<%= nonce %>" type="module">
    const origin = '<%= origin %>'
    const jwtAccess = '<%= searchJwtAccess %>'
    let map
    async function setupMapKitJs() {
      const tokenOpts = {
        method: 'GET',
        headers: {
          Accept: 'application/json',
          Authorization: `Bearer ${jwtAccess}`,
        },
      }
      const request = new Request(`${origin}/mapkit/getToken`, tokenOpts)
      const response = await fetch(request)
      let tokenID
      if (response.headers.get('content-type').includes("application/json")) {
        const x = await response.json()
        tokenID = x.tokenID
        console.log(`mapkit token: ${tokenID}`)
      } else {
        console.info('failed to get mapkit token')
        console.log(await response.text())
      }
      if (!window.mapkit || window.mapkit.loadedLibraries.length === 0) {
        // mapkit.core.js of the libraries are not loaded yet.
        // Set up the callback and wait for it to be called.
        await new Promise(resolve => { window.initMapKit = resolve })
        // Clean up
        delete window.initMapKit
      }
      mapkit.init({
        authorizationCallback: function(done) {
          done(tokenID)
        },
      })
    }
    async function main() {
      await setupMapKitJs()
      let lat = 39.833333 
      let lon = -98.583333
      let position
      const opts = {
        mapType: mapkit.Map.MapTypes.Hybrid,
        loadPriority: mapkit.Map.LoadPriorities.PointsOfInterest,
        visibleMapRect: new mapkit.MapRect(0, 0, 1, 1),
        isZoomEnabled: true,
        showsCompass: mapkit.FeatureVisibility.Visible,
        showsScale: mapkit.FeatureVisibility.Visible,
        showsZoomControl: true,
        cameraDistance: 100,
        showsPointsOfInterest: true,
        isRotationEnabled: true,
        isScrollEnabled: true,
        showsMapTypeControl: false,
      }
      if ("geolocation" in navigator) {
        console.log('where are we?') 
        function success(position) {
          console.log(position)
          return position
        }
        function error(err) {
          console.info(err)
          console.info(`code: ${err.code}: msg: ${err.message}`)
        }
        try {
          position = await new Promise((resolve, reject) => {
            navigator.geolocation.getCurrentPosition((geo) => {
                // console.log(geo)
                resolve(geo)
              },
              (err) => {
                console.log(err)
                console.info(`code: ${err.code}, msg: ${err.message}`)
                reject(err)
              }
            )
          })
        } catch (e) {
          console.log(e)
        }
        console.log('geolocation: ', position)
        if (position) {
          console.log('show user location')
          lat = position.coords.latitude
          lon = position.coords.longitude
          opts.showsUserLocation = true
          opts.tracksUserLocation = true
          opts.showsUserLocationControl = true
        } else {
          console.log('no geo position available')
          console.log('using lat: ', lat, ' lon: ', lon)
          // opts.showsUserLocation = true
          // opts.tracksUserLocation = true 
          opts.showsUserLocationControl = true
          // opts.cameraDistance = 0
        }
      } else {
        console.log('geolocation not available, no way of knowing.')
        console.log(`using ${lat} ${lon} instead`)
        console.log('geo error: ', position)
        opts.showsUserLocation = false
        opts.tracksUserLocation = false
        opts.showsUserLocationControl = false
        // opts.cameraDistance = 1000
      }
      window.me = new mapkit.Coordinate(lat, lon)
      window.here = new mapkit.CoordinateRegion(
        // new mapkit.Coordinate(lat, lon),
        me,
        new mapkit.CoordinateSpan(0.05, 0.05)
      )
      window.map = new mapkit.Map('map', opts)
      window.map.region = here
      window.map.cameraDistance = 10
      console.log(`map.showsUserLocation: ${window.map.showsUserLocation}`) 
      window.map.showsUserLocation = true 
      window.map.setCenterAnimated(me, true)

      if (window.Worker) {
        console.log('Worker <=> Walker')
        const walker = new Worker('<%= origin %>/j/worker.js')
        walker.onmessage = function(e) {
          // console.log(`${e.data}`)
        }
        walker.postMessage('What should I do?')
        const tasks = [
          {TASK: 'START_WALK', msg: 'I am starting a walk'},
          {TASK: 'STOP_WALK', msg: 'I am done with my walk'},
          {TASK: 'SET_WAYPOINT', msg: `I am at position (${lat} lat, ${lon} lon).`},
          {TASK: 'SAVE_WALK', msg: 'Save this walk.'},
          {TASK: 'GET_WALK', msg: 'Get that previous walk.'}
        ]
        tasks.forEach(async (walk) => {
          walker.postMessage(walk)
        })
      } else {
        console.log('Not compatible with walking.')
      }   
    }
    await main()
    
  </script>
</div>
