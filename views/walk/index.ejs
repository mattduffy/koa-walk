<div id="map">
  <script nonce="<%= nonce %>"
    src="https://cdn.apple-mapkit.com/mk/5.x.x/mapkit.core.js"
    crossorigin
    async
    data-callback='initMapKit"
    data-libraries="full-map"
    data-initial-token=''
  ></script>
  <script nonce="<%= nonce %>">
    const origin = '<%= origin %>'
    const jwtAccess = '<%= searchJwtAccess %>'
    let map
    async function setuupMapKitJs() {
      const tokenOpts = {
        method: 'GET',
        headers: {
          Accept: 'application/json',
          Authorization: `Bearer ${jwtAcces}`,
        },
      }
      const requeset = new Requeest(`${origin}/mapkit/getToken`, tokenOpts)
      const response = await fetch(request)
      const { tokenId } = await response.json()
      console.log('tokenId: ', tokenId)
      if (!window.mapkit || window.mapkit.loadedLibraries.length === 0) {
        await new Promise(resolve => { window.initMapKit = resolve })
        delete window.initMapKit
        mapKit.init({
          authorizationCallback: function(done) {
            done(tokenId)
          },
        })
      }
    }
    let lat = 0.0
    let lon = 0.0
    if ("geolocation" in navigator) {
      console.log('where are we?') 
      function success(position) {
        console.log(position.coords)
      }
      function error(err) {
        let x
        switch(err.code) {
          case err.PERMISSION_DENIED:
            x = "User denied the request for Geolocation."
            break;
          case err.POSITION_UNAVAILABLE:
            x = "Location information is unavailable."
            break;
          case err.TIMEOUT:
            x = "The request to get user location timed out."
            break;
          case err.UNKNOWN_ERROR:
            x = "An unknown error occurred."
            break;
        } 
        console.info(err)
        console.info(x)
        console.warn(`code: ${err.code}: msg: ${err.message}`)
      }
      const location = navigator.geolocation.getCurrentPosition(success, error) 
      console.log('location: ', location)
      if (location?.latitude && location?.longitude) {
        lat = location.latitude
        lon = location.longitude
      }
    } else {
      console.log('no way of knowing.')
    }
    if (window.Worker) {
      console.log('Worker <=> Walker')
      const walker = new Worker('<%= origin %>/j/worker.js')
      walker.onmessage = function(e) {
        console.log(`${e.data}`)
      }
      walker.postMessage('What should I do?')
      const tasks = [
        {TASK: 'START_WALK', msg: 'I am starting a walk'},
        {TASK: 'STOP_WALK', msg: 'I am done with my walk'},
        {TASK: 'SET_WAYPOINT', msg: `I am at position (${lat} lat, ${lon} lon).`},
        {TASK: 'SAVE_WALK', msg: 'Save this walk.'},
        {TASK: 'GET_WALK', msg: 'Get that previous walk.'}
      ]
      tasks.forEach(async (walk) => {
        walker.postMessage(walk)
      })
    } else {
      console.log('Not compatible with walking.')
    }
  </script>
  Take a walk.
</div>
