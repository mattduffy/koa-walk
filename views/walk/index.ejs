<div id="map">
  <div id="container">
    <div id="login" data-tab="login">
      <form id="loginId" name="login">
        <label for="emailId">Email: </label>
        <br>
        <input type="email" id="emailId" name="email" size="40" value="<%= sessionUser?.email?.primary %>" placeholder="user@example.com" required>
        <br>
        <label for="passwordId">Password: </label>
        <br>
        <input type="password" id="passwordId" name="password" size="40" value="" required>
        <br>
        <input type="hidden" id="csrfTokenId" name="csrfToken" value="<%= csrfToken %>" required>
        <input type="submit" id="submitId" name="submit" value="Login">
        <button id="cancelId" name="cancel">Cancel</button>
      </form>
      <div id="welcomeId">
        <h3>Hi, <span data-first=""><%= sessionUser?.firstName %></span></h3>
        <a id="logout" href="/logout">Log out</a>
      </div>
    </div>
    <div id="list" data-tab="list">
      <h3>Saved Walks</h3>
    </div>
    <div id="new" data-tab="new">
      <h3>Start A New Walk</h3>

    </div>
    <div id="maps" data-tab="maps">
      <h3>Show Maps</h3>

    </div>
    <div id="app" data-tab="app">
      <h3 id="h3"></h3>
      <p id="p1"></p>
      <p id="p2"></p>
    </div>
  </div>
</div>
<script nonce="<%= nonce %>"
  src="https://cdn.apple-mapkit.com/mk/5.x.x/mapkit.core.js"
  crossorigin async
  data-callback="initMapKit"
  data-libraries="services,full-map"
  data-initial-token="">
</script>
<script nonce="<%= nonce %>" type="module">
  window.geoWatch = null
  const dMap = document.querySelector('div#map')
  const dHeader = document.querySelector('header')
  function fitMap() {
    let mapHeight = window.innerHeight - dHeader.clientHeight
    dMap.style.height = `${mapHeight}px`
    dMap.style.maxHeight = `${mapHeight}px`
  }
  window.addEventListener('resize', (e) => {
    const h = window.innerHeight
    const w = window.innerWidth
    fitMap()
  })
  fitMap()
  window.walker = new Worker('<%= origin %>/j/worker.js', { name: 'walker' }) || null
  window.csrfToken = '<%= csrfToken %>'
  const accuracy = 30 // meters
  const accuracyMargin = 5 // meters
  let lowAccuracy = false
  const origin = '<%= origin %>'
  const jwtAccess = '<%= searchJwtAccess %>'
  let map
  const app = document.querySelector('div#app')
  async function setupMapKitJs() {
    const tokenOpts = {
      method: 'GET',
      headers: {
        Accept: 'application/json',
        Authorization: `Bearer ${jwtAccess}`,
      },
    }
    const request = new Request(`${origin}/mapkit/getToken`, tokenOpts)
    const response = await fetch(request)
    let tokenID
    if (response.headers.get('content-type').includes("application/json")) {
      const x = await response.json()
      tokenID = x.tokenID
      console.log(`mapkit token: ${tokenID}`)
    } else {
      console.info('failed to get mapkit token')
      console.log(await response.text())
    }
    if (!window.mapkit || window.mapkit.loadedLibraries.length === 0) {
      // mapkit.core.js of the libraries are not loaded yet.
      // Set up the callback and wait for it to be called.
      await new Promise(resolve => { window.initMapKit = resolve })
      // Clean up
      delete window.initMapKit
    }
    mapkit.init({
      authorizationCallback: function(done) {
        done(tokenID)
      },
    })
  }
  async function main() {
    await setupMapKitJs()
    let lat = 39.833333 
    let lon = -98.583333
    let position
    let watchPosId
    const mapOpts = {
      // mapType: mapkit.Map.MapTypes.Hybrid,
      mapType: mapkit.Map.MapTypes.Standard,
      loadPriority: mapkit.Map.LoadPriorities.PointsOfInterest,
      selectableMapFeatures: [mapkit.MapFeatureType.PhysicalFeature, mapkit.MapFeatureType.PointOfInterest],
      visibleMapRect: new mapkit.MapRect(0, 0, 1, 1),
      isZoomEnabled: true,
      showsCompass: mapkit.FeatureVisibility.Visible,
      showsScale: mapkit.FeatureVisibility.Visible,
      showsZoomControl: true,
      cameraDistance: 100,
      showsPointsOfInterest: true,
      isRotationEnabled: true,
      isScrollEnabled: true,
      // showsMapTypeControl: false,
      showsMapTypeControl: true,
    }
    if ("geolocation" in navigator) {
      console.log('Can we get a location fix?') 
      const _opts = {
        enableHighAccuracy: true,
        timeout: 5000,
        maximumAge: 0,
      }
      // watchPosId = navigator.geolocation.watchPosition(geoSuccess, geoFail, _opts)
      async function geoSuccess(g) {
        console.log('geoSuccess')
        console.info(g)
        updatePosition(g)
        window.p = g
        position = g
        try {
          await setPosition(position)
        } catch (e) {
          console.warn(e)
        }
      }
      function geoFail(g) {
        console.info('geoFail')
        console.info(g)
      }
      const geoOpts = {
        enableHighAccuracy: true,
        // maximumAge: 1000 * 10 * 3,
        maximumAge: 1000 * 3,
      }
      console.log('geo options: ', geoOpts)
      try {
        position = await new Promise((resolve, reject) => {
          navigator.geolocation.getCurrentPosition((geo) => {
              if (geo.coords.accuracy > accuracy) {
                console.info(`position.coords.accuracy (${geo.coords.accuracy}) is greater than ${accuracy}m`)
                lowAccuracy = true
              }
              lat = geo.coords.latitude
              lon = geo.coords.longitude
              resolve(geo)
            },
            (err) => {
              console.log(err)
              console.info(`code: ${err.code}, msg: ${err.message}`)
              reject(err)
            }
            ,geoOpts
          )
        })
        window.p = position
        await setPosition(position)
        updatePosition(position)
      } catch (e) {
        console.warn('failed to get geoLocation for some reason')
        console.warn(e)
        console.log('no geo position available')
        console.log('using generic lat: ', lat, ' lon: ', lon, ' to initialize the map.')
        // const position = { coords: { latitude: lat, longitude: lon, accuracy: 1000 } }
        const position = null
        lowAccuracy = null
        console.log('Position: ', position)
        await setPosition(position)
      }
    
    } else {
      console.log('geolocation not available, no way of knowing.')
      console.log(`using ${lat} ${lon} instead`)
      console.log('geo error: ', position)
      await noPositionCantWalk(mapOpts, { coords: { latitude: lat, longitude: lon, accuracy: 0 } })
      // await noPositionCantWalk({ lat, lon })
    }
    function updatePosition(g) {
      console.log('updating position')
      lat = g.coords.latitude
      lon = g.coords.longitude
      if (g.coords.accuracy > accuracy) {
        console.info(`position.coords.accuracy (${g.coords.accuracy}) is greater than ${accuracy}m`)
        lowAccuracy = true
      }
      const coords = { lat, lon, acc: g.coords.accuracy }
      populateApp(null, coords)
    }
    async function setPosition(position) {
      console.log('geolocation: ', position)
      // console.log(`Low accuracy ceiling: ${accuracy} + ${accuracyMargin} = ${accuracy + accuracyMargin} (actual accuracy: ${Math.trunc(position.coords.accuracy)})`)
      // console.log(`setPosition() position: ${position}, lowAccuracy: ${lowAccuracy}`)
      if (position && !lowAccuracy) {
        console.log('show user location')
        console.log(`position accuracy: ${position.coords.accuracy}`)
        await goodAccuracyCanWalk(mapOpts, position)
      } else if (position?.coords?.accuracy > accuracy && position?.coords?.accuracy <= accuracy + accuracyMargin) {
        console.info(`low geoLocation accuracy: ${position.coords.accuracy}`)
        console.info('can\'t track movement accurately.')
        console.info(mapOpts)
        await lowAccuracyPositionCantWalk(mapOpts, position)
      } else if (lowAccuracy && position) {
        console.info(`really low geoLocation accuracy: ${position.coords.accuracy}`)
        console.info('can\'t track movement accurately.')
        console.log(mapOpts)
        await lowAccuracyPositionCantWalk(mapOpts, position)
      } else {
        console.log('no geo position available')
        console.log('using lat: ', lat, ' lon: ', lon)
        await noPositionCantWalk(mapOpts, { coords: { latitude: lat, longitude: lon, accuracy: 1000 } })
        lowAccuracy = true
      }
    }
    window._map.addEventListener('single-tap', async (e) => {
      console.log(e)
    })
    window._map.addEventListener('user-location-change', async (e) => {
      console.log('user-location-change event', e)
      updatePosition(e.coordinate)
    })
      
    if (window.Worker) {
      console.log('Worker <=> Walker')
      const logged = <%= isAuthenticated %>
      const loginForm = document.forms['login']
      const login = loginForm.elements.submit
      login.addEventListener('click', (e) => {
        e.preventDefault()
        e.stopPropagation()
        doLogin(document.forms['login'])
      })
      const welcomeDiv = document.querySelector('div#welcomeId')
      if (logged) {
        welcomeDiv.style.display = 'block'
        loginForm.style.display = 'none'
      }
      const logout = document.querySelector('a#logout')
      logout.addEventListener('click', (e) => {
        e.preventDefault()
        e.stopPropagation()
        doLogout()
      })
      window.walker.onmessage = function(e) {
        console.log(e.data)
        switch (e.data.TASK) {
          case 'SETUP':

            break
          case 'LOGIN':
            if (e.data.user.status === 'login failed') {
              doLogin.failed(e.data.user)
            } else {
              doLogin.success(e.data.user)
            }
            break
          case 'LOGOUT':
            doLogout.finish(e.data)
            break
          case 'GET_LIST':
            window.getList.finish(e.data)
            break
          default:
            console.log(e.data)
        }
      }
      window.walker.onerror = function(e) {
        e.preventDefault()
        console.warn('err msg: ', e.message)
        console.warn('in: ', e.filename)
        console.warn('at: ', e.lineno)
      }
      

      window.walker.postMessage('What should I do?')
      const tasks = [
        {TASK: 'START_WALK', msg: 'I am starting a walk'},
        {TASK: 'STOP_WALK', msg: 'I am done with my walk'},
        {TASK: 'SET_WAYPOINT', msg: `I am at position (${lat} lat, ${lon} lon).`},
        {TASK: 'SAVE_WALK', msg: 'Save this walk.'},
        {TASK: 'GET_WALK', msg: 'Get that previous walk.'},
        {TASK: 'GET_A_LIFE', msg: 'you heard me'}
      ]
      try {
        tasks.forEach(async (walk) => {
          // window.walker.postMessage(walk)
        })
      } catch (e) {
        console.warn(e)
      }
    } else {
      console.log('Not compatible with walking.')
    }   
  }
  function doLogin(form) {
    const credentials = {}
    credentials.url = `${origin}/login`
    const csrfTokenHidden = form.elements['csrfToken']
    if (csrfTokenHidden.value === '' || csrfTokenHidden.value === undefined) {
      return isRequired(csrfTokenHidden)
    }
    credentials.csrfTokenHidden = csrfTokenHidden.value
    const email = form.elements['email']
    if (email.value === '' || email.value === undefined) {
      return isRequired(email)
    }
    credentials.email = email.value
    const password = form.elements['password']
    if (password.value === '' || password.value === undefined) {
      return isRequired(password)
    }
    credentials.password = password.value
    credentials.jwtAccess = jwtAccess
    credentials.TASK = 'LOGIN'
    console.log('1', credentials)
    function isRequired(el) {
      console.log(el) 
      el.style.border = '1px solid red'
      el.addEventListener('change', (e) => {
        e.target.style.border = ''
        removeEventListener('change', e.target)
      })
      return false
    }
    function success(e) {
      console.log('login success')
      console.log(e)
      const spans = document.querySelectorAll('span[data-first]')
      spans.forEach((span) => {
        console.log(span)
        span.dataset.first = e.user.first
        span.innerText = e.user.first
      })
      toggleTab('login')
      form.style.display = 'none'
      const welcome = document.querySelector('div#welcomeId')
      welcome.style.display = 'block'
      toggleButtons('showLogin')
    }
    doLogin.success = success
    function failed(e) {
      if (e?.error?.match(/wrong password/i)) {
        form.elements.password.style.border = '1px solid red'
      }
      if (e?.info?.match(/no user found with email/i)) {
        form.elements.email.style.border = '1px solid red'
      }
      console.log('login failed')
      console.log(e)
    }
    doLogin.failed = failed
    window.walker.postMessage(credentials)
  }
  function doLogout() {
    const form = document.forms['login']
    form.elements.password.value = ''
    form.elements.email.value = ''
    window.walker.postMessage({ TASK: 'LOGOUT', url: `${origin}/logout`, jwtAccess })
    function finish(res) {
      console.log('logout response: ', res)
      const spans = document.querySelectorAll('span[data-first]')
      spans.forEach((span) => {
        console.log(span)
        span.dataset.first = ''
        span.innerText = ''
      })
      toggleTab('login')
      form.style.display = 'block'
      const welcome = document.querySelector('div#welcomeId')
      welcome.style.display = 'none'
      window.csrfToken = res.response.user.csrfToken
      form.elements.csrfToken.value = res.response.user.csrfToken
    }
    doLogout.finish = finish
  }
  window.getList = async function() {
    const credentials = {}
    credentials.url = `${origin}/getList`
    credentials.csrfTokenHidden = window.csrfToken
    credentials.jwtAccess = jwtAccess
    credentials.TASK = 'GET_LIST'
    console.log(credentials)
    const div = document.querySelector('div#list')
    function finish(e) {
      console.log('getList.finish', e)
      const noAuth = div.children.namedItem('noAuth') ?? null
      if (e.auth === 'no' && !noAuth) { 
        console.log(`e.auth: ${e.auth}`)
        console.log(`noAuth: ${noAuth}`)
        const noAuthP = document.createElement('p')
        noAuthP.id = 'noAuth'
        noAuthP.textContent = 'Login to see saved walks.'
        div.appendChild(noAuthP)
      } else if (div.children.namedItem('noAuth')) {
        console.log('show noAuth')
        noAuth.style.display = 'block' 
      } else if (e.list.length === 0) {
        console.log(`e.list.length = ${e.list.length}`)
        if (noAuth) {
          noAuth.style.display = 'none'
        }
        if (div.children.namedItem('noWalks')) {
          console.log('already displayed no walks')
        } else {
          const noWalks = document.createElement('p')
          noWalks.textContent = 'No saved walks.'
          noWalks.id = 'noWalks'
          div.appendChild(noWalks)
        }
      } else {
        console.log(`e.auth = ${e.auth} && e.list.length = ${e.list.length}`)
        const walks = div.children.namedItem('walks')
        if (!walks) {
          const ul = document.createElement('ul')
          ul.id = 'walks'
          e.list.forEach((w) => {
            const li = document.createElement('li')
            li.innerHTML = `${w}`
            ul.appendChild(li)
          })
          div.appendChild(ul)
        } else {
          console.log(`e.auth = ${e.auth}`)
          e.list.forEach((w) => {
            const li = document.createElement('li')
            li.textContent = `${w}`
            ul.appendChild(li)
          })
        }
      }
    }
    getList.finish = finish
    window.walker.postMessage(credentials)
  }
  async function noPositionCantWalk(o, g) {
    console.log(`no position available: ${g}`)
    window.me = new mapkit.Coordinate(g.coords.latitude, g.coords.longitude)
    window.here = new mapkit.CoordinateRegion(
      me,
      new mapkit.CoordinateSpan(0.05, 0.05)
    )
    if (!window._map) {
      window._map = new mapkit.Map('map', o)
    }
    window._map.region = here
    window._map.cameraDistance = 2500000
    console.log(`map.showsUserLocation: ${window._map.showsUserLocation}`) 
    window._map.showsUserLocation = true 
    window._map.setCenterAnimated(me, true)
    const strings = {
      h3: 'You have no location.',
      p1: 'Your walk will not be recorded.',
      p2: ''
    }
    populateApp(strings)
    app.style.display = 'block'
  }  
  async function lowAccuracyPositionCantWalk(o, g) {
    console.log(`low accuracy: ${g.coords.accuracy}`)
    o.showsUserLocationControl = true
    window.me = new mapkit.Coordinate(g.coords.latitude, g.coords.longitude)
    window.here = new mapkit.CoordinateRegion(
      me,
      new mapkit.CoordinateSpan(0.05, 0.05)
    )
    if (!window._map) {
      window._map = new mapkit.Map('map', o)
    }
    window._map.region = here
    if (Math.trunc(g.coords.accuracy) > 10 * (accuracy + accuracyMargin)) {
      console.log('really low accuracy')
      window._map.cameraDistance = Math.trunc(g.coords.accuracy)
    } else {
      window._map.cameraDistance = 100
    }
    window._map.showsUserLocation = true 
    console.log(`map.showsUserLocation: ${window._map.showsUserLocation}`) 
    window._map.setCenterAnimated(me, true)
    myGeocoder(me)
    const strings = {
      h3: `Can't get a very accurate GPS position.`,
      p1: `Your position is <span id="lat" class="coords">${g.coords.latitude.toFixed(4)}</span> lat, <span id="lon" class="coords">${g.coords.longitude.toFixed(4)}</span> lon.<br>`
        + `GPS accuracy is <span id="acc" class="coords">${g.coords.accuracy.toFixed(1)}</span>m.`,
      p2: `Your walk may not be recorded very accurately.`,
    }
    populateApp(strings)
    app.style.display = 'block'
  }
  async function goodAccuracyCanWalk(o, g) {
    console.log(`good accuracy: ${g.coords.accuracy}`)
    o.showsUserLocation = true
    o.tracksUserLocation = true
    o.showsUserLocationControl = true
    window.me = new mapkit.Coordinate(g.coords.latitude, g.coords.longitude)
    window.here = new mapkit.CoordinateRegion(
      me,
      new mapkit.CoordinateSpan(0.05, 0.05)
    )
    if (!window._map) {
      window._map = new mapkit.Map('map', o)
    }
    window._map.region = here
    window._map.cameraDistance = 10
    console.log(`map.showsUserLocation: ${window._map.showsUserLocation}`) 
    window._map.showsUserLocation = true 
    window._map.setCenterAnimated(me, true)
    myGeocoder(me) 
    const strings = {
      h3: 'Your starting position looks good.',
      p1: `Your position is <span id="lat" class="coords">${g.coords.latitude.toFixed(4)}</span> lat, <span id="lon" class="coords">${g.coords.longitude.toFixed(4)}</span> lon.<br>`
        + `GPS accuracy is <span id="acc" class="coords">${g.coords.accuracy.toFixed(4)}</span>m.`,
      p2: 'Tap the start button when you are ready.',
    }
    populateApp(strings)
    app.style.display = 'block'
  }
  // Geocoder
  function myGeocoder(coords) {
    console.log('geocoder with: ', coords)
    const opts = {
      getsUserLocation: true,
      language: 'en-US'
    }
    const geocoder = new mapkit.Geocoder(opts)
    console.log(geocoder)
    const reverseLookup = geocoder.reverseLookup(coords, function(error, data) {
      console.log('reverseLookup callbback')
      if (error) {
        console.info(error)
      }
      if (data && data.results.length > 0) {
        console.log(data)

      }
    })
  }
  function populateApp(strings, coords = null) {
    const a = window.app || document.querySelector('div#app')    
    console.log(a)
    if (strings && !coords) {
      a.children.namedItem('h3').innerHTML = strings.h3
      a.children.namedItem('p1').innerHTML = strings.p1
      a.children.namedItem('p2').innerHTML = strings.p2
    }
    if (coords) {
      console.log('updating just the coordinates')
      if (coords.lat) a.querySelector('p > span#lat').innerHTML = coords.lat.toFixed(4)
      if (coords.lon) a.querySelector('p > span#lon').innerHTML = coords.lon.toFixed(4)
      if (coords.acc) a.querySelector('p > span#acc').innerHTML = coords.acc.toFixed(1)
    }
  }
  await main()
</script>
